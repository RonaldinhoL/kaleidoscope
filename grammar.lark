// copy from python lol

start: (_NEWLINE | statement)*

// #######  语句
?statement: simple_stmts | compound_stmt

// ####### 单行语句
?simple_stmts: small_stmt (";" small_stmt)* [";"] _NEWLINE

// ####### 简单语句
?small_stmt: expr_stmt | assign_stmt | pass_stmt | break_stmt | continue_stmt | return_stmt | extern_stmt

// 表达式语句
expr_stmt: expression

// 赋值语句
assign_stmt: augassign | assign
// 直接赋值
assign: expression ("=" (expression))+
// 运算赋值
augassign: expression augassign_op (expression)
!augassign_op: "+=" | "-=" | "*=" | "@=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**=" | "//="

// 其他短语句
pass_stmt: "pass"
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [expression]
extern_stmt: "extern" name "(" [parameters] ")"


// ####### 复合语句
?compound_stmt: funcdef | if_stmt | while_stmt | for_stmt


// 语句块
block : "{" _NEWLINE? statement* _NEWLINE? "}" _NEWLINE?


// 函数定义
funcdef: "def" name "(" [parameters] ")" block
parameters: paramvalue ("," paramvalue)*
?paramvalue: name ("=" expression)?

// 逻辑语句
if_stmt: "if" expression block elifs ["else"  block]
elifs: elif_*
elif_: "elif" expression block
while_stmt: "while" expression block
for_stmt: "for" name "in" expression



// EXPRESSIONS 表达式 优先级越高的越放到下面
?expression: disjunction ("if" disjunction "else" expression)?
// 逻辑表达式及其优先级
// 或
?disjunction: conjunction ("||" conjunction)*
// 与
?conjunction: inversion ("&&" inversion)*
// 非
?inversion: "!" inversion | comparison

// 比较运算
?comparison: or_expr (comp_op or_expr)*
!comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!="|"in"|"not" "in"|"is"|"is" "not"

// 位运算
// 或
?or_expr: xor_expr ("|" xor_expr)*
// 异或
?xor_expr: and_expr ("^" and_expr)*
// 与
?and_expr: shift_expr ("&" shift_expr)*

// 移位
?shift_expr: sum (_shift_op sum)*
!_shift_op: "<<"|">>"

// 算术项
?sum: term (_add_op term)*
!_add_op: "+"|"-"

// 乘除项
?term: factor (_mul_op factor)*
!_mul_op: "*"|"@"|"/"|"%"|"//"

// 正负和取反
?factor: _unary_op factor | power
!_unary_op: "+"|"-"|"~"


?power: atom_expr ("**" factor)?

// 原子表达式
?atom_expr: atom_expr "(" [arguments] ")"      -> funccall
          | atom
          // getitem
          // getattr

// 实参
arguments: argvalue ("," argvalue)*  ("," [ starargs | kwargs])?
         | starargs
         | kwargs
starargs: stararg ("," stararg)* ("," argvalue)* ["," kwargs]
stararg: "*" expression
kwargs: "**" expression ("," argvalue)*

?argvalue: expression


// 原子
// 其他基本类型，元组，列表，字典，推导式等
?atom: name -> var
     | number
     | string_concat
     | "(" expression ")"
     | "..." -> ellipsis
     | "None"    -> const_none
     | "True"    -> const_true
     | "False"   -> const_false

?string_concat: string+


// ##################### 终结符

number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER
string: STRING

// Other terminals

_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT

// Python terminals

!name: NAME
NAME: /[^\W\d]\w*/
COMMENT: /#[^\n]*/


// 字符串
STRING: /([ubf]?r?|r[ubf])("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i

// 数字
_SPECIAL_DEC: "0".."9"        ("_"?  "0".."9"                       )*
DEC_NUMBER:   "1".."9"        ("_"?  "0".."9"                       )*
          |   "0"             ("_"?  "0"                            )* /(?![1-9])/
HEX_NUMBER.2: "0" ("x" | "X") ("_"? ("0".."9" | "a".."f" | "A".."F"))+
OCT_NUMBER.2: "0" ("o" | "O") ("_"?  "0".."7"                       )+
BIN_NUMBER.2: "0" ("b" | "B") ("_"?  "0".."1"                       )+

_EXP: ("e"|"E") ["+" | "-"] _SPECIAL_DEC
DECIMAL: "." _SPECIAL_DEC | _SPECIAL_DEC "." _SPECIAL_DEC?
FLOAT_NUMBER.2: _SPECIAL_DEC _EXP | DECIMAL _EXP?